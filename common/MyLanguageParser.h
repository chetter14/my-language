/** \file
 *  This C header file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : MyLanguage.g
 *     -                            On : 2024-10-25 12:10:39
 *     -                for the parser : MyLanguageParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
MyLanguageParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pMyLanguageParser, which is returned from a call to MyLanguageParserNew().
 *
 * The methods in pMyLanguageParser are  as follows:
 *
 *  - 
 MyLanguageParser_source_return
      pMyLanguageParser->source(pMyLanguageParser)
 *  - 
 MyLanguageParser_typeRef_return
      pMyLanguageParser->typeRef(pMyLanguageParser)
 *  - 
 MyLanguageParser_builtInType_return
      pMyLanguageParser->builtInType(pMyLanguageParser)
 *  - 
 MyLanguageParser_identifier_return
      pMyLanguageParser->identifier(pMyLanguageParser)
 *  - 
 MyLanguageParser_arrayType_return
      pMyLanguageParser->arrayType(pMyLanguageParser)
 *  - 
 MyLanguageParser_arraySuf_return
      pMyLanguageParser->arraySuf(pMyLanguageParser)
 *  - 
 MyLanguageParser_funcSignature_return
      pMyLanguageParser->funcSignature(pMyLanguageParser)
 *  - 
 MyLanguageParser_parameterList_return
      pMyLanguageParser->parameterList(pMyLanguageParser)
 *  - 
 MyLanguageParser_parameter_return
      pMyLanguageParser->parameter(pMyLanguageParser)
 *  - 
 MyLanguageParser_sourceItem_return
      pMyLanguageParser->sourceItem(pMyLanguageParser)
 *  - 
 MyLanguageParser_statement_return
      pMyLanguageParser->statement(pMyLanguageParser)
 *  - 
 MyLanguageParser_block_statment_return
      pMyLanguageParser->block_statment(pMyLanguageParser)
 *  - 
 MyLanguageParser_if_statement_return
      pMyLanguageParser->if_statement(pMyLanguageParser)
 *  - 
 MyLanguageParser_while_statement_return
      pMyLanguageParser->while_statement(pMyLanguageParser)
 *  - 
 MyLanguageParser_repeat_statement_return
      pMyLanguageParser->repeat_statement(pMyLanguageParser)
 *  - 
 MyLanguageParser_break_statement_return
      pMyLanguageParser->break_statement(pMyLanguageParser)
 *  - 
 MyLanguageParser_expr_statement_return
      pMyLanguageParser->expr_statement(pMyLanguageParser)
 *  - 
 MyLanguageParser_expr_return
      pMyLanguageParser->expr(pMyLanguageParser)
 *  - 
 MyLanguageParser_assignment_expr_return
      pMyLanguageParser->assignment_expr(pMyLanguageParser)
 *  - 
 MyLanguageParser_logical_expr_return
      pMyLanguageParser->logical_expr(pMyLanguageParser)
 *  - 
 MyLanguageParser_comparison_expr_return
      pMyLanguageParser->comparison_expr(pMyLanguageParser)
 *  - 
 MyLanguageParser_additive_expr_return
      pMyLanguageParser->additive_expr(pMyLanguageParser)
 *  - 
 MyLanguageParser_multiplicative_expr_return
      pMyLanguageParser->multiplicative_expr(pMyLanguageParser)
 *  - 
 MyLanguageParser_unary_expr_return
      pMyLanguageParser->unary_expr(pMyLanguageParser)
 *  - 
 MyLanguageParser_primary_expr_return
      pMyLanguageParser->primary_expr(pMyLanguageParser)
 *  - 
 MyLanguageParser_base_expr_return
      pMyLanguageParser->base_expr(pMyLanguageParser)
 *  - 
 MyLanguageParser_expr_suf_return
      pMyLanguageParser->expr_suf(pMyLanguageParser)
 *  - 
 MyLanguageParser_braces_return
      pMyLanguageParser->braces(pMyLanguageParser)
 *  - 
 MyLanguageParser_place_return
      pMyLanguageParser->place(pMyLanguageParser)
 *  - 
 MyLanguageParser_literal_return
      pMyLanguageParser->literal(pMyLanguageParser)
 *  - 
 MyLanguageParser_un_op_return
      pMyLanguageParser->un_op(pMyLanguageParser)
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_MyLanguageParser_H
#define _MyLanguageParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct MyLanguageParser_Ctx_struct MyLanguageParser, * pMyLanguageParser;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

typedef struct MyLanguageParser_source_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_source_return;



typedef struct MyLanguageParser_typeRef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_typeRef_return;



typedef struct MyLanguageParser_builtInType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_builtInType_return;



typedef struct MyLanguageParser_identifier_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_identifier_return;



typedef struct MyLanguageParser_arrayType_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_arrayType_return;



typedef struct MyLanguageParser_arraySuf_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_arraySuf_return;



typedef struct MyLanguageParser_funcSignature_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_funcSignature_return;



typedef struct MyLanguageParser_parameterList_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_parameterList_return;



typedef struct MyLanguageParser_parameter_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_parameter_return;



typedef struct MyLanguageParser_sourceItem_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_sourceItem_return;



typedef struct MyLanguageParser_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_statement_return;



typedef struct MyLanguageParser_block_statment_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_block_statment_return;



typedef struct MyLanguageParser_if_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_if_statement_return;



typedef struct MyLanguageParser_while_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_while_statement_return;



typedef struct MyLanguageParser_repeat_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_repeat_statement_return;



typedef struct MyLanguageParser_break_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_break_statement_return;



typedef struct MyLanguageParser_expr_statement_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_expr_statement_return;



typedef struct MyLanguageParser_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_expr_return;



typedef struct MyLanguageParser_assignment_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_assignment_expr_return;



typedef struct MyLanguageParser_logical_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_logical_expr_return;



typedef struct MyLanguageParser_comparison_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_comparison_expr_return;



typedef struct MyLanguageParser_additive_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_additive_expr_return;



typedef struct MyLanguageParser_multiplicative_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_multiplicative_expr_return;



typedef struct MyLanguageParser_unary_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_unary_expr_return;



typedef struct MyLanguageParser_primary_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_primary_expr_return;



typedef struct MyLanguageParser_base_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_base_expr_return;



typedef struct MyLanguageParser_expr_suf_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_expr_suf_return;



typedef struct MyLanguageParser_braces_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_braces_return;



typedef struct MyLanguageParser_place_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_place_return;



typedef struct MyLanguageParser_literal_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_literal_return;



typedef struct MyLanguageParser_un_op_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    MyLanguageParser_un_op_return;




/** Context tracking structure for 
MyLanguageParser

 */
struct MyLanguageParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     MyLanguageParser_source_return
     (*source)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_typeRef_return
     (*typeRef)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_builtInType_return
     (*builtInType)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_identifier_return
     (*identifier)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_arrayType_return
     (*arrayType)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_arraySuf_return
     (*arraySuf)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_funcSignature_return
     (*funcSignature)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_parameterList_return
     (*parameterList)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_parameter_return
     (*parameter)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_sourceItem_return
     (*sourceItem)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_statement_return
     (*statement)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_block_statment_return
     (*block_statment)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_if_statement_return
     (*if_statement)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_while_statement_return
     (*while_statement)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_repeat_statement_return
     (*repeat_statement)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_break_statement_return
     (*break_statement)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_expr_statement_return
     (*expr_statement)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_expr_return
     (*expr)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_assignment_expr_return
     (*assignment_expr)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_logical_expr_return
     (*logical_expr)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_comparison_expr_return
     (*comparison_expr)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_additive_expr_return
     (*additive_expr)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_multiplicative_expr_return
     (*multiplicative_expr)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_unary_expr_return
     (*unary_expr)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_primary_expr_return
     (*primary_expr)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_base_expr_return
     (*base_expr)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_expr_suf_return
     (*expr_suf)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_braces_return
     (*braces)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_place_return
     (*place)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_literal_return
     (*literal)	(struct MyLanguageParser_Ctx_struct * ctx);

     MyLanguageParser_un_op_return
     (*un_op)	(struct MyLanguageParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred15_MyLanguage)	(struct MyLanguageParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred23_MyLanguage)	(struct MyLanguageParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred24_MyLanguage)	(struct MyLanguageParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred26_MyLanguage)	(struct MyLanguageParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred34_MyLanguage)	(struct MyLanguageParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred40_MyLanguage)	(struct MyLanguageParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred41_MyLanguage)	(struct MyLanguageParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred43_MyLanguage)	(struct MyLanguageParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred44_MyLanguage)	(struct MyLanguageParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred49_MyLanguage)	(struct MyLanguageParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred52_MyLanguage)	(struct MyLanguageParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct MyLanguageParser_Ctx_struct * ctx);
    void	    (*free)   (struct MyLanguageParser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pMyLanguageParser MyLanguageParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pMyLanguageParser MyLanguageParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__39      39
#define T__40      40
#define T__41      41
#define T__42      42
#define T__43      43
#define T__44      44
#define T__45      45
#define T__46      46
#define T__47      47
#define T__48      48
#define T__49      49
#define T__50      50
#define T__51      51
#define T__52      52
#define T__53      53
#define T__54      54
#define T__55      55
#define T__56      56
#define T__57      57
#define T__58      58
#define T__59      59
#define T__60      60
#define T__61      61
#define T__62      62
#define T__63      63
#define T__64      64
#define T__65      65
#define T__66      66
#define T__67      67
#define T__68      68
#define T__69      69
#define T__70      70
#define T__71      71
#define T__72      72
#define Args      4
#define Array      5
#define ArrayAccess      6
#define ArrayType      7
#define Bits      8
#define BlockStatement      9
#define Body      10
#define Bool      11
#define BreakStatement      12
#define BuiltInType      13
#define Char      14
#define Condition      15
#define DIGITS      16
#define Dec      17
#define Else      18
#define ExpressionStatement      19
#define FuncSignature      20
#define Function      21
#define FunctionCall      22
#define Hex      23
#define Identifier      24
#define IfStatement      25
#define Indices      26
#define MULTI_COMMENT      27
#define Parameter      28
#define ParameterList      29
#define RepeatCondition      30
#define SINGLE_COMMENT      31
#define Source      32
#define Statement      33
#define Str      34
#define Then      35
#define TypeRef      36
#define WS      37
#define WhileStatement      38
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for MyLanguageParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
